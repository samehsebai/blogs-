{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\react-starter\\\\front\\\\src\\\\pages\\\\quiz\\\\Quiz.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./quiz.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n\n  const questions = [{\n    questionText: 'What is the capital of France?',\n    answerOptions: [{\n      answerText: 'New York',\n      isCorrect: false\n    }, {\n      answerText: 'London',\n      isCorrect: false\n    }, {\n      answerText: 'Paris',\n      isCorrect: true\n    }, {\n      answerText: 'Dublin',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'Who is CEO of Tesla?',\n    answerOptions: [{\n      answerText: 'Jeff Bezos',\n      isCorrect: false\n    }, {\n      answerText: 'Elon Musk',\n      isCorrect: true\n    }, {\n      answerText: 'Bill Gates',\n      isCorrect: false\n    }, {\n      answerText: 'Tony Stark',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'The iPhone was created by which company?',\n    answerOptions: [{\n      answerText: 'Apple',\n      isCorrect: true\n    }, {\n      answerText: 'Intel',\n      isCorrect: false\n    }, {\n      answerText: 'Amazon',\n      isCorrect: false\n    }, {\n      answerText: 'Microsoft',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'How many Harry Potter books are there?',\n    answerOptions: [{\n      answerText: '1',\n      isCorrect: false\n    }, {\n      answerText: '4',\n      isCorrect: false\n    }, {\n      answerText: '6',\n      isCorrect: false\n    }, {\n      answerText: '7',\n      isCorrect: true\n    }]\n  }];\n  const [currentQuestion, setCurrentQuestion] = useStat(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const handleAnswerOptionClick = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: showScore ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-section\",\n      children: [\"You scored \", score, \" out of \", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-count\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Question \", currentQuestion + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 8\n          }, this), \"/\", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-text\",\n          children: questions[currentQuestion].questionText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-section\",\n        children: questions[currentQuestion].answerOptions.map(answerOption => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswerOptionClick(answerOption.isCorrect),\n          children: answerOption.answerText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 8\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 3\n  }, this);\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(Quiz, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 17\n  }, this), document.getElementById(\"root\"));\n}\n\n_s(Quiz, \"MVKELeD4wH8TKIBETGu2VwSVUic=\", true);\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/LENOVO/Desktop/react-starter/front/src/pages/quiz/Quiz.jsx"],"names":["React","Component","ReactDOM","Quiz","questions","questionText","answerOptions","answerText","isCorrect","currentQuestion","setCurrentQuestion","useStat","showScore","setShowScore","useState","score","setScore","handleAnswerOptionClick","nextQuestion","length","map","answerOption","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./quiz.css\"\r\n\r\nexport default function Quiz() {\r\n  \r\n  const questions = [\r\n\t\t{\r\n\t\t\tquestionText: 'What is the capital of France?',\r\n\t\t\tanswerOptions: [\r\n\t\t\t\t{ answerText: 'New York', isCorrect: false },\r\n\t\t\t\t{ answerText: 'London', isCorrect: false },\r\n\t\t\t\t{ answerText: 'Paris', isCorrect: true },\r\n\t\t\t\t{ answerText: 'Dublin', isCorrect: false },\r\n\t\t\t],\r\n\t\t},\r\n\t\t{\r\n\t\t\tquestionText: 'Who is CEO of Tesla?',\r\n\t\t\tanswerOptions: [\r\n\t\t\t\t{ answerText: 'Jeff Bezos', isCorrect: false },\r\n\t\t\t\t{ answerText: 'Elon Musk', isCorrect: true },\r\n\t\t\t\t{ answerText: 'Bill Gates', isCorrect: false },\r\n\t\t\t\t{ answerText: 'Tony Stark', isCorrect: false },\r\n\t\t\t],\r\n\t\t},\r\n\t\t{\r\n\t\t\tquestionText: 'The iPhone was created by which company?',\r\n\t\t\tanswerOptions: [\r\n\t\t\t\t{ answerText: 'Apple', isCorrect: true },\r\n\t\t\t\t{ answerText: 'Intel', isCorrect: false },\r\n\t\t\t\t{ answerText: 'Amazon', isCorrect: false },\r\n\t\t\t\t{ answerText: 'Microsoft', isCorrect: false },\r\n\t\t\t],\r\n\t\t},\r\n\t\t{\r\n\t\t\tquestionText: 'How many Harry Potter books are there?',\r\n\t\t\tanswerOptions: [\r\n\t\t\t\t{ answerText: '1', isCorrect: false },\r\n\t\t\t\t{ answerText: '4', isCorrect: false },\r\n\t\t\t\t{ answerText: '6', isCorrect: false },\r\n\t\t\t\t{ answerText: '7', isCorrect: true },\r\n\t\t\t],\r\n\t\t},\r\n\t];\r\n\r\n\tconst [currentQuestion, setCurrentQuestion] = useStat(0);\r\n\tconst [showScore, setShowScore] = useState(false);\r\n\tconst [score, setScore] = useState(0);\r\n\r\n\tconst handleAnswerOptionClick = (isCorrect) => {\r\n\t\tif (isCorrect) {\r\n\t\t\tsetScore(score + 1);\r\n\t\t}\r\n\r\n\t\tconst nextQuestion = currentQuestion + 1;\r\n\t\tif (nextQuestion < questions.length) {\r\n\t\t\tsetCurrentQuestion(nextQuestion);\r\n\t\t} else {\r\n\t\t\tsetShowScore(true);\r\n\t\t}\r\n\t};\r\n\treturn (\r\n\t\t<div className='app'>\r\n\t\t\t{showScore ? (\r\n\t\t\t\t<div className='score-section'>\r\n\t\t\t\t\tYou scored {score} out of {questions.length}\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div className='question-section'>\r\n\t\t\t\t\t\t<div className='question-count'>\r\n\t\t\t\t\t\t\t<span>Question {currentQuestion + 1}</span>/{questions.length}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='question-text'>{questions[currentQuestion].questionText}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='answer-section'>\r\n\t\t\t\t\t\t{questions[currentQuestion].answerOptions.map((answerOption) => (\r\n\t\t\t\t\t\t\t<button onClick={() => handleAnswerOptionClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t\r\n\t);\r\n\r\n  \r\nReactDOM.render(<Quiz/>, document.getElementById(\"root\"));}"]},"metadata":{},"sourceType":"module"}